package com.example.fams.mapper;


import com.example.fams.dto.TrainingProgramDTO2;
import com.example.fams.dto.clazz.*;
import com.example.fams.dto.trainingprogram.ClassDetailOfListDTO;
import com.example.fams.models.clazz.ClassSubject;
import com.example.fams.models.clazz.ClassUser;
import com.example.fams.models.training.TrainingProgram;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import java.util.List;

@Mapper(componentModel = "spring")
public interface ClassSubjectMapper {

    @Mapping(target = "modifiedBy", ignore = true)
    @Mapping(target = "modifiedDate", ignore = true)
    @Mapping(target = "classId", ignore = true) // Assuming classId is generated by the database
    ClassSubject createClassDtoToClassSubject(ClassSubjectDTO classDTO);

    @Mapping(target = "searchField",expression = "java(classSubject.getClassName() + \" - \" + classSubject.getClassCode() +" +
            " \" - \" +classSubject.getCreateDate() + \" - \" +classSubject.getCreateBy() + \" - \" +classSubject.getDuration() + \" - \" +classSubject.getStatus() + \" - \" +classSubject.getLocation()" +
            "+ \" - \" +classSubject.getFsu())")
    ClassSubjectSearchDTO classSubjectToSearchDTO(ClassSubject classSubject);

    @Mapping(target = "classId", ignore = true)
    ClassDetailOfListDTO toClassDetailOfListDto(ClassSubject classSubject);
    @Mapping(target = "classId", ignore = true)
    ClassSubject toClassSubject(ClassDetailOfListDTO classDetailOfListDTO);
    List<ClassDetailOfListDTO> toClassSubjectListDTO(List<ClassSubject> classSubjectList);

    ClassDTO classSubjectToClassDTO(ClassSubject classSubject);

    @Mapping(target = "syllabusList", source = "trainingProgramSyllabus")
    TrainingProgramDTO2 trainingProgramToTrainingProgramDTO2(TrainingProgram trainingProgram);
}
